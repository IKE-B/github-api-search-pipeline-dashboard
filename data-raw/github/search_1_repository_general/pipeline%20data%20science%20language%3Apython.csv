name;full_name;description;fork;html_url
galaxy;galaxyproject/galaxy;Data intensive science for everyone.;false;https://github.com/galaxyproject/galaxy
datajoint-python;datajoint/datajoint-python;Relational data pipelines for the science lab ;false;https://github.com/datajoint/datajoint-python
kedro;kedro-org/kedro;Kedro is a toolbox for production-ready data science. It uses software engineering best practices to help you create data engineering and data science pipelines that are reproducible, maintainable, and modular.;false;https://github.com/kedro-org/kedro
aws-step-functions-data-science-sdk-python;aws/aws-step-functions-data-science-sdk-python;Step Functions Data Science SDK for building machine learning (ML) workflows and pipelines on AWS;false;https://github.com/aws/aws-step-functions-data-science-sdk-python
deepvariant;google/deepvariant;DeepVariant is an analysis pipeline that uses a deep neural network to call genetic variants from next-generation DNA sequencing data.;false;https://github.com/google/deepvariant
accelerated-data-science;oracle/accelerated-data-science;ADS is the Oracle Data Science Cloud Service's python SDK supporting, model ops (train/eval/deploy), along with running workloads on Jobs and Pipeline resources.;false;https://github.com/oracle/accelerated-data-science
seq2science;vanheeringen-lab/seq2science;Automated and customizable preprocessing of Next-Generation Sequencing data, including full (sc)ATAC-seq, ChIP-seq, and (sc)RNA-seq workflows. Works equally easy with public as local data. ;false;https://github.com/vanheeringen-lab/seq2science
disdat;kyocum/disdat;Data science tool for creating and deploying pipelines with versioned data ;false;https://github.com/kyocum/disdat
babyds;Rock-River-Research/babyds;An AI-powered data science pipeline;false;https://github.com/Rock-River-Research/babyds
NIRSPEC-Data-Reduction-Pipeline;Keck-DataReductionPipelines/NIRSPEC-Data-Reduction-Pipeline;NSDRP was developed by the Keck Observatory Archive.  KOA is a collaboration between the NASA Exoplanet Science Institute and the W. M. Keck Observatory. NExScI is sponsored by NASA’s Exoplanet Program and operated by the California Institute of Technology in coordination with the Jet Propulsion Laboratory. Please contact the KOA Help Desk with questions: https://koa.ipac.caltech.edu/cgi-bin/Helpdesk/nph-genTicketForm?projname=KOA;false;https://github.com/Keck-DataReductionPipelines/NIRSPEC-Data-Reduction-Pipeline
DevOpsForAI;praneet22/DevOpsForAI;Deploy end to end ML/AI pipelines using Azure ML Service and Azure DevOps and take a Data Science (AI/ML) solution into Production.;false;https://github.com/praneet22/DevOpsForAI
ci-cd-pipeline-template-for-data-projects;zoltan-nz/ci-cd-pipeline-template-for-data-projects;CI/CD pipeline template for data science projects using GitLab CI and Kubernetes;false;https://github.com/zoltan-nz/ci-cd-pipeline-template-for-data-projects
prodmodel;prodmodel/prodmodel;Build, test, deploy, iterate - Dev and prod tool for data science pipelines;false;https://github.com/prodmodel/prodmodel
Deployment_Data_Science_Project;sawadogosalif/Deployment_Data_Science_Project;Deploy maching learning model in local / server /API /cloud/ dockers;false;https://github.com/sawadogosalif/Deployment_Data_Science_Project
DS-Pipeline;sumonbis/DS-Pipeline;This repository contains the source code and data used for the ICSE'22 paper on Data Science Pipeline.;false;https://github.com/sumonbis/DS-Pipeline
aqueduct;CityOfLosAngeles/aqueduct;A shared pipeline for building ETLs and batch jobs that we run at the City of LA for Data Science Projects. Built on Apache Airflow & Civis Platform ;false;https://github.com/CityOfLosAngeles/aqueduct
dsds;abstractqqq/dsds;Another take on data science pipelines.;false;https://github.com/abstractqqq/dsds
mlpl;ozanzgur/mlpl;A machine learning pipeline to speed up data science life cycle;false;https://github.com/ozanzgur/mlpl
villard;ariaghora/villard;A pipeline framework for data science projects;false;https://github.com/ariaghora/villard
python-snippets;dushyantkhosla/python-snippets;Useful Python snippets for data science and more;false;https://github.com/dushyantkhosla/python-snippets
CMIDAT01K-DATA-SCIENCE-for-IOT;robvdw/CMIDAT01K-DATA-SCIENCE-for-IOT;This course is designed to provide a basic grounding of the Internet of Things (IoT) and Data Science with a practical knowledge of the Raspberry Pi as the main device to build a consumer  IoT data pipeline. The aim is to equip students with hands-on experience to solve  basic IoT problems. Providing them with templates and a data-toolkit (code), which can be implemented through popular single board microcontrollers (Arduino and/or Raspberry Pi).;false;https://github.com/robvdw/CMIDAT01K-DATA-SCIENCE-for-IOT
dia_pipe;LSSTDESC/dia_pipe;Difference Image Analysis pipeline using LSST DM Science Pipelines developed for DESC Data Challenges;false;https://github.com/LSSTDESC/dia_pipe
unit-tests-ml-pipelines;agaravaglia/unit-tests-ml-pipelines;Repository example of implementing unit-tests for data science projects;false;https://github.com/agaravaglia/unit-tests-ml-pipelines
Piscine_Python_Data_Science.42;Chegashi/Piscine_Python_Data_Science.42;The piscine focuses on basic programming skills with Python and the most popular and useful data science libraries. The participants will be able to collect data with parsing, preprocess data using Pandas and SQL and build pipelines with machine learning algorithms.;false;https://github.com/Chegashi/Piscine_Python_Data_Science.42
datanectar;wesmadrigal/datanectar;A project for streamlining large scale ETL and data science pipelines.;false;https://github.com/wesmadrigal/datanectar
tv-show-recommendations;itsjafer/tv-show-recommendations;Machine learning pipeline trained offline that, given a TV Show, recommends 10 similar TV Shows using cosine similarities based on a variety of features;false;https://github.com/itsjafer/tv-show-recommendations
stau;connectedcars/stau;Data science pipeline tool for handling recurring workloads;false;https://github.com/connectedcars/stau
FRB_pipeline;federatedcloud/FRB_pipeline;A customizable scientific software pipeline for detecting, categorizing, and viewing single pulse candidates that may be Fast Radio Burst (FRB) sources in Radio Astronomy data.;false;https://github.com/federatedcloud/FRB_pipeline
pipedown;brendanhasz/pipedown;A data science pipelining framework for Python :shushing_face:;false;https://github.com/brendanhasz/pipedown
linkedin-data-science-job-tracker;napalm5/linkedin-data-science-job-tracker;Data pipeline with web interface to track real-time trends in the Data Science job market;false;https://github.com/napalm5/linkedin-data-science-job-tracker
DataSciencePipline;Serena-TT/DataSciencePipline;Data_science_pipeline;false;https://github.com/Serena-TT/DataSciencePipline
data_science_pipeline;nickruta/data_science_pipeline;This project demonstrates all of the technologies needed to create an end-to-end data science pipeline. This includes consuming data from an original source, processing and storing it and finally providing machine-learning based results to end users.;false;https://github.com/nickruta/data_science_pipeline
ploomber-pipeline-demo;noratenk/ploomber-pipeline-demo;A demo project using ploomber to demonstate data science pipeline using Jupyter notebooks as building blocks.;false;https://github.com/noratenk/ploomber-pipeline-demo
dspipeline;chrisferreyra13/dspipeline;Ultimate data science pipeline;false;https://github.com/chrisferreyra13/dspipeline
Science_report;TuanLe-BenKon/Science_report;Repo of online data pipeline and dashboard;false;https://github.com/TuanLe-BenKon/Science_report
DSND_Data_Pipeline;hendrik-sill/DSND_Data_Pipeline;Data Science Nanodegree ETL and Machine Learning Pipeline Project;false;https://github.com/hendrik-sill/DSND_Data_Pipeline
udacity_disaster_response_pipeline_project;feliche93/udacity_disaster_response_pipeline_project;Project for the Udacity Data Science Nanodegree;false;https://github.com/feliche93/udacity_disaster_response_pipeline_project
data_provenance_for_data_science;Lucass97/data_provenance_for_data_science;Backend with the purpose of capturing data provenance and metadata of a preprocessing Pipeline;false;https://github.com/Lucass97/data_provenance_for_data_science
AutomaticDataScience;bilan604/AutomaticDataScience;Automating the entire data science pipeline from loading the data to comparing trained model performance metrics;false;https://github.com/bilan604/AutomaticDataScience
snowflet;bluefloyd00/snowflet;Snowflake pipeline, etl, data science framework;false;https://github.com/bluefloyd00/snowflet
DisasterResponsePipeline;carsimoes/DisasterResponsePipeline;A Data Science project. #Python #JupyterNotebook #MachineLearning #DataMining;false;https://github.com/carsimoes/DisasterResponsePipeline
data-science-modeling-framework;msarafzadeh/data-science-modeling-framework;Data Science frame work created to assist the modeling pipeline: from EDA, to model training, to best model selection, to threshold optimization, to model explainabilty.;false;https://github.com/msarafzadeh/data-science-modeling-framework
Disaster-Response-pipeline-Project;AyaAbulnasr/Disaster-Response-pipeline-Project;Using Data Science with Machine Learning techniques (ETL pipeline and ML pipeline) to classify received messages after disasters.;false;https://github.com/AyaAbulnasr/Disaster-Response-pipeline-Project
ML-airport-taxi-out;nasa/ML-airport-taxi-out;The ML-airport-taxi-out software is developed to provide a reference implementation to serve as a research example how to train and register Machine Learning (ML) models intended for four distinct use cases: 1) unimpeded AMA taxi out, 2) unimpeded ramp taxi out, 3) impeded AMA taxi out, and 4) impeded ramp taxi out. The software is designed to point to databases which are not provided as part of the software release and thus this software is only intended to serve as an example of best practices. The software is built in python and leverages open-source libraries kedro, scikitlearn, MLFlow, and others. The software provides examples how to build three distinct pipelines for data query and save, data engineering, and data science. These pipelines enable scalable, repeatable, and maintainable development of ML models.;false;https://github.com/nasa/ML-airport-taxi-out
ML-airport-data-services;nasa/ML-airport-data-services;The ML-airport-data-services software is developed to provide common code used throughout the ML-airport suite of software. The software is built in python and leverages open-source libraries kedro, scikitlearn, MLFlow, and others. The software provides useful functions for development of pipelines including data query and save, data engineering, and data science.;false;https://github.com/nasa/ML-airport-data-services
ML-airport-configuration;nasa/ML-airport-configuration;The ML-airport-configuration software is developed to provide a reference implementation to serve as a research example how to train and register Machine Learning (ML) models intended for predicting airport configuration as a time series. The software is designed to point to databases which are not provided as part of the software release and thus this software is only intended to serve as an example of best practices. The software is built in python and leverages open-source libraries kedro, scikitlearn, MLFlow, and others. The software provides examples how to build three distinct pipelines for data query and save, data engineering, and data science. These pipelines enable scalable, repeatable, and maintainable development of ML models.;false;https://github.com/nasa/ML-airport-configuration
fika;karthikraja95/fika;Automate Data Science Workflow from Exploratory Data Analysis to Model Deployment;false;https://github.com/karthikraja95/fika
ds-template;renjithbaby23/ds-template;A project template for data science projects with optimal static code analysis and CI-CD pipelines.;false;https://github.com/renjithbaby23/ds-template
LambdaTMDB;broepke/LambdaTMDB;How to Setup a Simple ETL Pipeline with AWS Lambda for Data Science;false;https://github.com/broepke/LambdaTMDB
windmill_power_prediction;SergeiAP/windmill_power_prediction;Data Science case for windmill power prediction based on weather. Based on Data Challenge of Air Liquide (@AirLiquide) and TotalEnergies(@total-sa, @Total-RD) companies in 2021. The link of the competition - https://datascience.total.com/fr/challenge/19/details#.;false;https://github.com/SergeiAP/windmill_power_prediction
ML-airport-departure-runway;nasa/ML-airport-departure-runway;The ML-airport-departure-runway software is developed to provide a reference implementation to serve as a research example how to train and register Machine Learning (ML) models intended for predicting departure runway assignments. The software is designed to point to databases which are not provided as part of the software release and thus this software is only intended to serve as an example of best practices. The software is built in python and leverages open-source libraries kedro, scikitlearn, MLFlow, and others. The software provides examples how to build three distinct pipelines for data query and save, data engineering, and data science. These pipelines enable scalable, repeatable, and maintainable development of ML models.;false;https://github.com/nasa/ML-airport-departure-runway
21_DS_Branch;1337-Artificial-Intelligence/21_DS_Branch;The piscine focuses on basic programming skills with Python and the most popular and useful data science libraries. The participants will be able to collect data with parsing, preprocess data using Pandas and SQL and build pipelines with machine learning algorithms.;false;https://github.com/1337-Artificial-Intelligence/21_DS_Branch
ML-airport-arrival-runway;nasa/ML-airport-arrival-runway;The ML-airport-arrival-runway software is developed to provide a reference implementation to serve as a research example how to train and register Machine Learning (ML) models intended for predicting arrival runway assignments. The software is designed to point to databases which are not provided as part of the software release and thus this software is only intended to serve as an example of best practices. The software is built in python and leverages open-source libraries kedro, scikitlearn, MLFlow, and others. The software provides examples how to build three distinct pipelines for data query and save, data engineering, and data science. These pipelines enable scalable, repeatable, and maintainable development of ML models.;false;https://github.com/nasa/ML-airport-arrival-runway
ML-airport-taxi-in;nasa/ML-airport-taxi-in;The ML-airport-taxi-in software is developed to provide a reference implementation to serve as a research example how to train and register Machine Learning (ML) models intended for four distinct use cases: 1) unimpeded AMA taxi in, 2) unimpeded ramp taxi in, 3) impeded AMA taxi in, and 4) impeded ramp taxi in. The software is designed to point to databases which are not provided as part of the software release and thus this software is only intended to serve as an example of best practices. The software is built in python and leverages open-source libraries kedro, scikitlearn, MLFlow, and others. The software provides examples how to build three distinct pipelines for data query and save, data engineering, and data science. These pipelines enable scalable, repeatable, and maintainable development of ML models.;false;https://github.com/nasa/ML-airport-taxi-in
ML-airport-estimated-ON;nasa/ML-airport-estimated-ON;The ML-airport-estimated-ON software is developed to provide a reference implementation to serve as a research example how to train and register Machine Learning (ML) models intended for predicting arrival ON time. The software is designed to point to databases which are not provided as part of the software release and thus this software is only intended to serve as an example of best practices. The software is built in python and leverages open-source libraries kedro, scikitlearn, MLFlow, and others. The software provides examples how to build three distinct pipelines for data query and save, data engineering, and data science. These pipelines enable scalable, repeatable, and maintainable development of ML models.;false;https://github.com/nasa/ML-airport-estimated-ON
Parkinson-Disease-Prediction;Aastha2104/Parkinson-Disease-Prediction;"Introduction  Parkinson’s Disease is the second most prevalent neurodegenerative disorder after Alzheimer’s, affecting more than 10 million people worldwide. Parkinson’s is characterized primarily by the deterioration of motor and cognitive ability. There is no single test which can be administered for diagnosis. Instead, doctors must perform a careful clinical analysis of the patient’s medical history. Unfortunately, this method of diagnosis is highly inaccurate. A study from the National Institute of Neurological Disorders finds that early diagnosis (having symptoms for 5 years or less) is only 53% accurate. This is not much better than random guessing, but an early diagnosis is critical to effective treatment. Because of these difficulties, I investigate a machine learning approach to accurately diagnose Parkinson’s, using a dataset of various speech features (a non-invasive yet characteristic tool) from the University of Oxford. Why speech features? Speech is very predictive and characteristic of Parkinson’s disease; almost every Parkinson’s patient experiences severe vocal degradation (inability to produce sustained phonations, tremor, hoarseness), so it makes sense to use voice to diagnose the disease. Voice analysis gives the added benefit of being non-invasive, inexpensive, and very easy to extract clinically. Background  Parkinson's Disease  Parkinson’s is a progressive neurodegenerative condition resulting from the death of the dopamine containing cells of the substantia nigra (which plays an important role in movement). Symptoms include: “frozen” facial features, bradykinesia (slowness of movement), akinesia (impairment of voluntary movement), tremor, and voice impairment. Typically, by the time the disease is diagnosed, 60% of nigrostriatal neurons have degenerated, and 80% of striatal dopamine have been depleted. Performance Metrics  TP = true positive, FP = false positive, TN = true negative, FN = false negative Accuracy: (TP+TN)/(P+N) Matthews Correlation Coefficient: 1=perfect, 0=random, -1=completely inaccurate Algorithms Employed  Logistic Regression (LR): Uses the sigmoid logistic equation with weights (coefficient values) and biases (constants) to model the probability of a certain class for binary classification. An output of 1 represents one class, and an output of 0 represents the other. Training the model will learn the optimal weights and biases. Linear Discriminant Analysis (LDA): Assumes that the data is Gaussian and each feature has the same variance. LDA estimates the mean and variance for each class from the training data, and then uses properties of statistics (Bayes theorem , Gaussian distribution, etc) to compute the probability of a particular instance belonging to a given class. The class with the largest probability is the prediction. k Nearest Neighbors (KNN): Makes predictions about the validation set using the entire training set. KNN makes a prediction about a new instance by searching through the entire set to find the k “closest” instances. “Closeness” is determined using a proximity measurement (Euclidean) across all features. The class that the majority of the k closest instances belong to is the class that the model predicts the new instance to be. Decision Tree (DT): Represented by a binary tree, where each root node represents an input variable and a split point, and each leaf node contains an output used to make a prediction. Neural Network (NN): Models the way the human brain makes decisions. Each neuron takes in 1+ inputs, and then uses an activation function to process the input with weights and biases to produce an output. Neurons can be arranged into layers, and multiple layers can form a network to model complex decisions. Training the network involves using the training instances to optimize the weights and biases. Naive Bayes (NB): Simplifies the calculation of probabilities by assuming that all features are independent of one another (a strong but effective assumption). Employs Bayes Theorem to calculate the probabilities that the instance to be predicted is in each class, then finds the class with the highest probability. Gradient Boost (GB): Generally used when seeking a model with very high predictive performance. Used to reduce bias and variance (“error”) by combining multiple “weak learners” (not very good models) to create a “strong learner” (high performance model). Involves 3 elements: a loss function (error function) to be optimized, a weak learner (decision tree) to make predictions, and an additive model to add trees to minimize the loss function. Gradient descent is used to minimize error after adding each tree (one by one). Engineering Goal  Produce a machine learning model to diagnose Parkinson’s disease given various features of a patient’s speech with at least 90% accuracy and/or a Matthews Correlation Coefficient of at least 0.9. Compare various algorithms and parameters to determine the best model for predicting Parkinson’s.  Dataset Description  Source: the University of Oxford 195 instances (147 subjects with Parkinson’s, 48 without Parkinson’s) 22 features (elements that are possibly characteristic of Parkinson’s, such as frequency, pitch, amplitude / period of the sound wave) 1 label (1 for Parkinson’s, 0 for no Parkinson’s) Project Pipeline  pipeline  Summary of Procedure  Split the Oxford Parkinson’s Dataset into two parts: one for training, one for validation (evaluate how well the model performs) Train each of the following algorithms with the training set: Logistic Regression, Linear Discriminant Analysis, k Nearest Neighbors, Decision Tree, Neural Network, Naive Bayes, Gradient Boost Evaluate results using the validation set Repeat for the following training set to validation set splits: 80% training / 20% validation, 75% / 25%, and 70% / 30% Repeat for a rescaled version of the dataset (scale all the numbers in the dataset to a range from 0 to 1: this helps to reduce the effect of outliers) Conduct 5 trials and average the results Data  a_o  a_r  m_o  m_r  Data Analysis  In general, the models tended to perform the best (both in terms of accuracy and Matthews Correlation Coefficient) on the rescaled dataset with a 75-25 train-test split. The two highest performing algorithms, k Nearest Neighbors and the Neural Network, both achieved an accuracy of 98%. The NN achieved a MCC of 0.96, while KNN achieved a MCC of 0.94. These figures outperform most existing literature and significantly outperform current methods of diagnosis. Conclusion and Significance  These robust results suggest that a machine learning approach can indeed be implemented to significantly improve diagnosis methods of Parkinson’s disease. Given the necessity of early diagnosis for effective treatment, my machine learning models provide a very promising alternative to the current, rather ineffective method of diagnosis. Current methods of early diagnosis are only 53% accurate, while my machine learning model produces 98% accuracy. This 45% increase is critical because an accurate, early diagnosis is needed to effectively treat the disease. Typically, by the time the disease is diagnosed, 60% of nigrostriatal neurons have degenerated, and 80% of striatal dopamine have been depleted. With an earlier diagnosis, much of this degradation could have been slowed or treated. My results are very significant because Parkinson’s affects over 10 million people worldwide who could benefit greatly from an early, accurate diagnosis. Not only is my machine learning approach more accurate in terms of diagnostic accuracy, it is also more scalable, less expensive, and therefore more accessible to people who might not have access to established medical facilities and professionals. The diagnosis is also much simpler, requiring only a 10-15 second voice recording and producing an immediate diagnosis. Future Research  Given more time and resources, I would investigate the following: Create a mobile application which would allow the user to record his/her voice, extract the necessary vocal features, and feed it into my machine learning model to diagnose Parkinson’s. Use larger datasets in conjunction with the University of Oxford dataset. Tune and improve my models even further to achieve even better results. Investigate different structures and types of neural networks. Construct a novel algorithm specifically suited for the prediction of Parkinson’s. Generalize my findings and algorithms for all types of dementia disorders, such as Alzheimer’s. References  Bind, Shubham. ""A Survey of Machine Learning Based Approaches for Parkinson Disease Prediction."" International Journal of Computer Science and Information Technologies 6 (2015): n. pag. International Journal of Computer Science and Information Technologies. 2015. Web. 8 Mar. 2017. Brooks, Megan. ""Diagnosing Parkinson's Disease Still Challenging."" Medscape Medical News. National Institute of Neurological Disorders, 31 July 2014. Web. 20 Mar. 2017. Exploiting Nonlinear Recurrence and Fractal Scaling Properties for Voice Disorder Detection', Little MA, McSharry PE, Roberts SJ, Costello DAE, Moroz IM. BioMedical Engineering OnLine 2007, 6:23 (26 June 2007) Hashmi, Sumaiya F. ""A Machine Learning Approach to Diagnosis of Parkinson’s Disease.""Claremont Colleges Scholarship. Claremont College, 2013. Web. 10 Mar. 2017. Karplus, Abraham. ""Machine Learning Algorithms for Cancer Diagnosis."" Machine Learning Algorithms for Cancer Diagnosis (n.d.): n. pag. Mar. 2012. Web. 20 Mar. 2017. Little, Max. ""Parkinsons Data Set."" UCI Machine Learning Repository. University of Oxford, 26 June 2008. Web. 20 Feb. 2017. Ozcift, Akin, and Arif Gulten. ""Classifier Ensemble Construction with Rotation Forest to Improve Medical Diagnosis Performance of Machine Learning Algorithms."" Computer Methods and Programs in Biomedicine 104.3 (2011): 443-51. Semantic Scholar. 2011. Web. 15 Mar. 2017. ""Parkinson’s Disease Dementia."" UCI MIND. N.p., 19 Oct. 2015. Web. 17 Feb. 2017. Salvatore, C., A. Cerasa, I. Castiglioni, F. Gallivanone, A. Augimeri, M. Lopez, G. Arabia, M. Morelli, M.c. Gilardi, and A. Quattrone. ""Machine Learning on Brain MRI Data for Differential Diagnosis of Parkinson's Disease and Progressive Supranuclear Palsy.""Journal of Neuroscience Methods 222 (2014): 230-37. 2014. Web. 18 Mar. 2017. Shahbakhi, Mohammad, Danial Taheri Far, and Ehsan Tahami. ""Speech Analysis for Diagnosis of Parkinson’s Disease Using Genetic Algorithm and Support Vector Machine.""Journal of Biomedical Science and Engineering 07.04 (2014): 147-56. Scientific Research. July 2014. Web. 2 Mar. 2017. ""Speech and Communication."" Speech and Communication. Parkinson's Disease Foundation, n.d. Web. 22 Mar. 2017. Sriram, Tarigoppula V. S., M. Venkateswara Rao, G. V. Satya Narayana, and D. S. V. G. K. Kaladhar. ""Diagnosis of Parkinson Disease Using Machine Learning and Data Mining Systems from Voice Dataset."" SpringerLink. Springer, Cham, 01 Jan. 1970. Web. 17 Mar. 2017.";false;https://github.com/Aastha2104/Parkinson-Disease-Prediction
